// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Participant {
    struct ParticipantData {
        string name;
        string email;
        bool gender;
    }
    uint32 private index;
    mapping(address => uint32) public mapAddress;
    mapping(uint32 => ParticipantData) public mapPaticipant;

    constructor() {
        index = 0;
    }

    function getParticipant(
        uint32 _index
    ) public view returns (string memory, string memory, bool) {
        require(_index < index, "User index doesn't exists!");
        ParticipantData memory _par = mapPaticipant[_index];

        return (_par.name, _par.email, _par.gender);
    }

    function getParticipants() public view returns (ParticipantData[] memory) {
        ParticipantData[] memory _lst = new ParticipantData[](index);

        for (uint32 i = 0; i < index; i++) {
            _lst[i] = mapPaticipant[i];
        }

        return _lst;
    }

    function addParticipant(
        string memory _name,
        string memory _email,
        bool _gender
    ) public {
        mapAddress[msg.sender] = index;
        mapPaticipant[index] = ParticipantData(_name, _email, _gender);
        index++;
    }
}
